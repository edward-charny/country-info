{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/components/country/country.component.ts","./src/app/components/country/country.component.html","./src/app/services/country.service.ts","./src/app/components/country-details/country-details.component.ts","./src/app/components/country-details/country-details.component.html","./src/app/app.module.ts","./src/app/components/country-list/country-list.component.ts","./src/app/components/country-list/country-list.component.html","./src/app/components/country-filter/country-filter.component.ts","./src/app/components/country-filter/country-filter.component.html","./src/app/components/navbar/navbar.component.ts","./src/app/components/navbar/navbar.component.html","./src/app/components/country-search/country-search.component.ts","./src/app/components/country-search/country-search.component.html","./src/app/models/country.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'country-info';\n}\n","<div class=\"container\">\n  <navbar></navbar>\n  <router-outlet></router-outlet>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Country } from 'src/app/models/country';\n\n@Component({\n  selector: 'country',\n  templateUrl: './country.component.html',\n  styleUrls: ['./country.component.scss']\n})\nexport class CountryComponent implements OnInit {\n  @Input('country') country: Country;\n\n  constructor(private router: Router) {\n    this.country = new Country();\n  }\n\n  ngOnInit(): void {\n  }\n\n  handleClick(): void {\n    this.router.navigate(['details', this.country.alpha3Code.toLocaleLowerCase()]);\n  }\n}\n","<mat-card class='country-card' (click)='handleClick()'>\n    <img class='country-image' [src] ='country.flag' alt='{{ country.name }}' />\n    <div class=\"country-info\">\n        <h2 class='country-name mat-title'>{{ country.name }}</h2>\n        <dl class='country-brief'>\n            <div>\n                <dt>Population:</dt>\n                <dd>{{ country.population | number }}</dd>\n            </div>\n            <div>\n                <dt>Region:</dt>\n                <dd>{{ country.region }}</dd>\n            </div>\n            <div>\n                <dt>Capital:</dt>\n                <dd>{{ country.capital }}</dd>\n            </div>\n        </dl>\n    </div>\n</mat-card>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Country } from '../models/country';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryService {\n  private completeListUrl: string = 'https://restcountries.eu/rest/v2/all';\n  private codeUrl: string = 'https://restcountries.eu/rest/v2/alpha/';\n  private regionUrl: string = 'https://restcountries.eu/rest/v2/region/';\n\n  countries$: Observable<Country[]>;\n  private _countries: BehaviorSubject<Country[]>;\n  countryDetails$: Observable<Country>;\n  private _countryDetails: BehaviorSubject<Country>;\n  regions$: Observable<string[]>;\n  private _regions: BehaviorSubject<string[]>;\n  filteredCountries$: Observable<Country[]>;\n  private _filteredCountries: BehaviorSubject<Country[]>;\n  private dataStore: {\n    countries: Country[];\n    countryDetails: Country;\n    filteredCountries: Country[];\n    filteredCountriesBackup: Country[];\n    regions: string[];\n  }\n\n  constructor(private http: HttpClient) {\n    this.dataStore = {\n      countries: new Array<Country>(),\n      countryDetails: new Country(),\n      filteredCountries: new Array<Country>(),\n      filteredCountriesBackup: new Array<Country>(),\n      regions: new Array<string>()\n    };\n    this._countries = new BehaviorSubject(new Array<Country>());\n    this.countries$ = this._countries.asObservable();\n    this._countryDetails = new BehaviorSubject(new Country());\n    this.countryDetails$ = this._countryDetails.asObservable();\n    this._filteredCountries = new BehaviorSubject(new Array<Country>());\n    this.filteredCountries$ = this._filteredCountries.asObservable();\n    this._regions = new BehaviorSubject(new Array<string>());\n    this.regions$ = this._regions.asObservable();\n  }\n\n  getCountryList(): void {\n    this.getCountries(this.completeListUrl);\n  }\n\n  getCountryByCode(code: string): void {\n    this.http.get(this.codeUrl + code, {responseType: 'json'}).subscribe((response: any) => {\n      if(response !== undefined && response !== null) {\n        let country: Country = new Country();\n        country = response;\n        this.dataStore.countryDetails = country;\n        this._countryDetails.next(Object.assign({}, this.dataStore).countryDetails);\n      }\n    }, error => {\n      console.log('error retrieving countries');\n      console.log(error);\n    });\n  }\n\n  getCountryByRegion(region: string): void {\n    this.getCountries(this.regionUrl + region);\n  }\n\n  restoreFilteredCountries(): void {\n    if(this.dataStore.filteredCountriesBackup.length > 0) {\n      this.dataStore.filteredCountries = this.dataStore.filteredCountriesBackup;\n      this._filteredCountries.next(Object.assign({}, this.dataStore).filteredCountries);\n      this.dataStore.filteredCountriesBackup = new Array<Country>();\n    }\n  }\n\n  updateFilteredCountries(countries: Country[], filterMode: boolean): void {\n    if(filterMode && this.dataStore.filteredCountriesBackup.length == 0) {\n      if(this.dataStore.filteredCountries.length == 0) {\n        this.dataStore.filteredCountriesBackup = countries;\n      } else {\n        this.dataStore.filteredCountriesBackup = this.dataStore.filteredCountries;\n      }\n    }\n    this.dataStore.filteredCountries = countries;\n    if(!filterMode) {\n      this.processRegions();\n    }\n    this._filteredCountries.next(Object.assign({}, this.dataStore).filteredCountries);\n    \n  }\n\n  private getCountries(url:string): void {\n    this.http.get(url, {responseType: 'json'}).subscribe((response: any) => {\n      if(response !== undefined && response !== null) {\n        let countries: Country[] = new Array<Country>();\n        countries = response;\n        this.dataStore.countries = countries;\n        this.dataStore.filteredCountries = countries;\n        this.processRegions();\n        this._countries.next(Object.assign({}, this.dataStore).countries);\n        this._filteredCountries.next(Object.assign({}, this.dataStore).filteredCountries);\n      }\n    }, error => {\n      console.log('error retrieving countries');\n      console.log(error);\n    });\n  }\n\n  private processRegions(): void {\n    let countries = this.dataStore.filteredCountries;\n    this.dataStore.regions = new Array<string>();\n    this.dataStore.regions.push('');\n\n    for(let country of countries) {\n      if(!this.dataStore.regions.includes(country.region)){\n        this.dataStore.regions.push(country.region)\n      }\n    }\n\n    this._regions.next(Object.assign({}, this.dataStore).regions)\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Country } from 'src/app/models/country';\nimport { CountryService } from 'src/app/services/country.service';\n\n@Component({\n  selector: 'country-details',\n  templateUrl: './country-details.component.html',\n  styleUrls: ['./country-details.component.scss']\n})\nexport class CountryDetailsComponent implements OnInit {\n  borderCountries: Country[];\n  currencies: string;\n  countryDetails: Country;\n  countries: Country[];\n  private countryDetailsSubscription;\n  private countrySubscription;\n  id: any;\n  languages: string;\n\n  constructor(private countryService: CountryService, private route: ActivatedRoute, private router: Router) {\n    this.borderCountries = new Array<Country>();\n    this.currencies = '';\n    this.countries = new Array<Country>();\n    this.countryDetails = new Country();\n    this.countrySubscription = new Subscription();\n    this.countryDetailsSubscription = new Subscription();\n    this.id = '';\n    this.languages = '';\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params: Params) => {\n      this.id = params['code'];\n    });\n    this.countryDetailsSubscription = this.countryService.countryDetails$.subscribe(results => {\n      if (results !== undefined && results !== null) {\n        this.countryDetails = results;\n        this.currencies = this.processCurrencies();\n        this.languages = this.processLanguages();\n        this.countrySubscription = this.countryService.countries$.subscribe(results => {\n          if (results !== undefined && results !== null) {\n            this.countries = results;\n            this.borderCountries = this.countries.filter(country => this.countryDetails.borders.includes(country.alpha3Code));\n          }\n        }, error => {\n          console.log('error retrieving countries');\n        });\n      }\n    }, error => {\n      console.log('error retrieving countries');\n    });\n    \n    this.countryService.getCountryByCode(this.id);\n  }\n\n  handleBack(): void {\n    this.router.navigate(['/']);\n  }\n\n  handleClick(code: string): void {\n    this.countryService.getCountryByCode(code);\n  }\n\n  processCurrencies(): string {\n    let currencies = this.countryDetails.currencies;\n    let currencyString = '';\n\n    for(let i = 0; i < currencies.length; i++) {\n      currencyString += currencies[i].name;\n      if(i < currencies.length - 1)\n        currencyString += ', ';\n    }\n    return currencyString;\n  }\n\n  processLanguages(): string {\n    let languages = this.countryDetails.languages;\n    let languagesString = '';\n    \n    for(let i = 0; i < languages.length; i++) {\n      languagesString += languages[i].name;\n      if(i < languages.length - 1)\n        languagesString += ', ';\n    }\n    return languagesString;\n  }\n\n  ngOnDestroy(): void {\n    if (this.countryDetailsSubscription) {\n      this.countryDetailsSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"country-details-container\">\n    <button mat-raised-button class='back-button' (click)='handleBack()'>\n        <mat-icon fontSet=\"material-icons-outlined\">arrow_back</mat-icon>\n        Back\n    </button>\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-6 country-image-container\">\n            <img class='country-details-image' [src] ='countryDetails.flag' alt='{{ countryDetails.name }}' />\n        </div>\n        <div class=\"col-xs-12 col-sm-6 country-details\">\n            <h2 class='country-name mat-title'>{{ countryDetails.name }}</h2>\n            <dl class='country-details-data'>\n                <div class=\"row\">\n                    <div class=\"col-xs-12 col-sm-6\">\n                        <div>\n                            <dt>Native Name:</dt>\n                            <dd>{{ countryDetails.nativeName }}</dd>\n                        </div>\n                        <div>\n                            <dt>Population:</dt>\n                            <dd>{{ countryDetails.population | number }}</dd>\n                        </div>\n                        <div>\n                            <dt>Region:</dt>\n                            <dd>{{ countryDetails.region }}</dd>\n                        </div>\n                        <div>\n                            <dt>Sub Region:</dt>\n                            <dd>{{ countryDetails.subregion }}</dd>\n                        </div>\n                        <div>\n                            <dt>Capital:</dt>\n                            <dd>{{ countryDetails.capital }}</dd>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-12 col-sm-6\">\n                        <div>\n                            <dt>Top Level Domain:</dt>\n                            <dd>{{ countryDetails.topLevelDomain }}</dd>\n                        </div>\n                        <div>\n                            <dt>Currencies:</dt>\n                            <dd>{{ currencies}}</dd>\n                        </div>\n                        <div>\n                            <dt>Languages:</dt>\n                            <dd>{{ languages }}</dd>\n                        </div>\n                    </div>\n                </div>\n            </dl>\n            <div class=\"row border-countries\">\n                <div class=\"mat-label\">Border Countries:</div>\n                <ng-container *ngIf='borderCountries.length > 0; else noBorderCountries'>\n                    <button mat-raised-button class='border-country-button' *ngFor='let borderCountry of borderCountries' (click)='handleClick(borderCountry.alpha3Code)'>{{ borderCountry.name }}</button>               </ng-container>\n                <ng-template #noBorderCountries>\n                    <span class='no-border-countries'>N/A</span>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\nimport { CountryComponent } from './components/country/country.component';\nimport { CountryDetailsComponent } from './components/country-details/country-details.component';\nimport { CountrySearchComponent } from './components/country-search/country-search.component';\nimport { CountryFilterComponent } from './components/country-filter/country-filter.component';\nimport { CountryService } from './services/country.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    CountryListComponent,\n    CountryComponent,\n    CountryDetailsComponent,\n    CountrySearchComponent,\n    CountryFilterComponent\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatSelectModule,\n    ReactiveFormsModule\n  ],\n  providers: [CountryService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Country } from 'src/app/models/country';\nimport { CountryService } from 'src/app/services/country.service';\n\n@Component({\n  selector: 'country-list',\n  templateUrl: './country-list.component.html',\n  styleUrls: ['./country-list.component.scss']\n})\nexport class CountryListComponent implements OnInit {\n  countries: Country[];\n  private countrySubscription;\n\n  constructor(private countryService: CountryService) {\n    this.countries = new Array<Country>();\n    this.countrySubscription = new Subscription();\n  }\n\n  ngOnInit(): void {\n    this.countrySubscription = this.countryService.filteredCountries$.subscribe(results => {\n      if (results !== undefined && results !== null) {\n        this.countries = results;\n      }\n    }, error => {\n      console.log('error retrieving countries');\n    });\n    this.countryService.getCountryList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.countrySubscription) {\n      this.countrySubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"country-list-container\">\n    <form class=\"row\">\n        <country-search class='country-search-container col-xs-12 col-sm-4'></country-search>\n        <country-filter class='country-filter-container col-xs-12 col-sm-8'></country-filter>\n    </form>\n    <ul class=\"country-list row\">\n        <li class=\"country col-xs-12 col-sm-3\" *ngFor='let country of countries'>\n            <country [country]=country></country>\n        </li>\n    </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Country } from 'src/app/models/country';\nimport { CountryService } from 'src/app/services/country.service';\n\n@Component({\n  selector: 'country-filter',\n  templateUrl: './country-filter.component.html',\n  styleUrls: ['./country-filter.component.scss']\n})\nexport class CountryFilterComponent implements OnInit {\n  filteredCountries: Country[];\n  regions: string[];\n  private filteredCountrySubscription;\n  private regionSubscription;\n  selectedRegion: string;\n\n\n  constructor(private countryService: CountryService) {\n    this.filteredCountries = new Array<Country>();\n    this.filteredCountrySubscription = new Subscription();\n    this.regions = new Array<string>();\n    this.regionSubscription = new Subscription();\n    this.selectedRegion = '';\n  }\n\n  ngOnInit(): void {\n    this.filteredCountrySubscription = this.countryService.filteredCountries$.subscribe(results => {\n      if (results !== undefined && results !== null) {\n        this.filteredCountries = results;\n      }\n    }, error => {\n      console.log('error retrieving countries');\n    });\n    this.regionSubscription = this.countryService.regions$.subscribe(results => {\n      if (results !== undefined && results !== null) {\n        this.regions = results.sort();\n      }\n    }, error => {\n      console.log('error retrieving regions');\n    });\n  }\n\n  handleSelectionChange(selectedRegion: string): void {\n    this.countryService.restoreFilteredCountries();\n    if(selectedRegion !== '') {\n      let results = this.filteredCountries.filter(country => country.region.toLowerCase().includes(selectedRegion.toLowerCase()));\n      this.countryService.updateFilteredCountries(results, true);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.filteredCountrySubscription) {\n      this.filteredCountrySubscription.unsubscribe();\n    }\n    if (this.regionSubscription) {\n      this.regionSubscription.unsubscribe();\n    }\n  }\n}\n","<mat-form-field class=\"country-filter\" appearance=\"outline\">\n  <mat-select [(ngModel)]='selectedRegion' disableOptionCentering='true' placeholder='Filter by Region' (selectionChange)='handleSelectionChange(selectedRegion)'>\n    <mat-select-trigger>Filter by Region</mat-select-trigger>\n    <mat-option *ngFor=\"let region of regions\" [value]=\"region\">\n      {{region}}\n    </mat-option>\n  </mat-select>\n</mat-form-field>","import { Component, OnInit, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n  darkTheme: boolean;\n\n  constructor(private renderer: Renderer2) {\n    this.darkTheme = false;\n  }\n\n  ngOnInit(): void {\n  }\n\n  toggleTheme() {\n    if(!this.darkTheme) {\n      this.darkTheme = true;\n      this.renderer.addClass(document.body, 'dark-theme');\n    } else {\n      this.darkTheme = false;\n      this.renderer.removeClass(document.body, 'dark-theme');\n    }\n  }\n}\n","<nav class=\"row\">\n    <div class=\"col-xs-8 col-sm-6 nav-title\">\n        <h1 class='mat-headline'>Where in the world?</h1>\n    </div>\n    <div class=\"col-xs-4 col-sm-6 nav-mode-switch\">\n        <button mat-button *ngIf='!darkTheme' (click)='toggleTheme()'>\n            <mat-icon fontSet=\"material-icons-outlined\">dark_mode</mat-icon>\n            Dark Mode\n        </button>\n        <button mat-button *ngIf='darkTheme' (click)='toggleTheme()'>\n            <mat-icon fontSet=\"material-icons-outlined\">dark_mode</mat-icon>\n            Light Mode\n        </button>\n    </div>\n</nav>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { Country } from 'src/app/models/country';\nimport { CountryService } from 'src/app/services/country.service';\n\n@Component({\n  selector: 'country-search',\n  templateUrl: './country-search.component.html',\n  styleUrls: ['./country-search.component.scss']\n})\nexport class CountrySearchComponent implements OnInit {\n  searchControl;\n  countries: Country[];\n  private countrySubscription;\n  filteredCountries$: Observable<Country[]>;\n\n  constructor(private countryService: CountryService) {\n    this.countries = new Array<Country>();\n    this.countrySubscription = new Subscription();\n    this.filteredCountries$ = new Observable<Country[]>();\n    this.searchControl = new FormControl();\n  }\n\n  ngOnInit() {\n    this.countrySubscription = this.countryService.countries$.subscribe(results => {\n      if (results !== undefined && results !== null) {\n        this.countries = results;\n      }\n    }, error => {\n      console.log('error retrieving countries');\n    });\n    this.countryService.getCountryList();\n    this.filteredCountries$ = this.searchControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n\n  private _filter(value: string): Country[] {\n    const filterValue = value.toLowerCase();\n\n    let results = this.countries.filter(country => country.name.toLowerCase().includes(filterValue));\n    this.countryService.updateFilteredCountries(results, false);\n    return results;\n  }\n\n  ngOnDestroy(): void {\n    if (this.countrySubscription) {\n      this.countrySubscription.unsubscribe();\n    }\n  }\n}\n","<mat-form-field class=\"country-search\" appearance=\"outline\">\n  <mat-icon matPrefix>search</mat-icon>\n  <input type=\"text\"\n          placeholder=\"Search for a country...\"\n          aria-label=\"Search for a country...\"\n          matInput\n          [formControl]=\"searchControl\"\n          [matAutocomplete]=\"auto\">\n  <mat-autocomplete #auto=\"matAutocomplete\">\n    <mat-option *ngFor=\"let country of filteredCountries$ | async\" [value]=\"country.name\">\n      {{country.name}}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>","import { Currency } from './currency';\nimport { Language } from './language';\n\nexport class Country {\n    alpha3Code: string;\n    borders: string[];\n    capital: string;\n    currencies: Currency[];\n    flag: string;\n    languages: Language[];\n    name: string;\n    nativeName: string;\n    population: number;\n    region: string;\n    subregion: string;\n    topLevelDomain: string[];\n\n    constructor() {\n        this.alpha3Code = '';\n        this.borders = new Array<string>();\n        this.capital = '';\n        this.currencies = new Array<Currency>();\n        this.flag = '';\n        this.languages = new Array<Language>();\n        this.name = '';\n        this.nativeName = '';\n        this.population = 0;\n        this.region = '';\n        this.subregion = '';\n        this.topLevelDomain = new Array<string>();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CountryDetailsComponent } from './components/country-details/country-details.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\n\nconst routes: Routes = [\n  { path: 'details', children: [\n    { path: ':code', component: CountryDetailsComponent }\n  ]},\n  { path: '', component: CountryListComponent },\n  { path: '**', redirectTo: '/', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}